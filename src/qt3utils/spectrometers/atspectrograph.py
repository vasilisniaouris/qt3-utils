"""
Wrapper for Andor Technologies Spectrograph library atspectrograph.h.

Originally generated by ctypesgen and modified accordingly, with:
ctypesgen -l atspectrograph.dll atspectrograph.h -o atspectrograph.py
"""
import ctypes
import functools
from ctypes import c_int, POINTER, c_float
from enum import Enum
from typing import Callable

from ctypesgen.printer_python.preamble import String
from ..load_lib import library_registry, load_library, get_potential_paths_via_environment, \
    DEFAULT_ENV_KEYS_OF_INSTALLATION_FOLDERS, pythonify


class ATSpectrograph:

    DEFAULT_LIBRARY_NAME = 'atspectrograph.dll'
    DEFAULT_REGISTRY_NAME = 'atspectrograph'
    DEFAULT_INSTALLATION_PATHS = [r'Andor SDK\atspectrograph\64', r'Andor SDK\atspectrograph\32']
    DEFAULT_ENV_KEYS = DEFAULT_ENV_KEYS_OF_INSTALLATION_FOLDERS
    DEFAULT_PATHS = get_potential_paths_via_environment(DEFAULT_INSTALLATION_PATHS, DEFAULT_ENV_KEYS)

    ERRORLENGTH = 64

    class ReturnCodes(Enum):
        COMMUNICATION_ERROR = 20201
        SUCCESS = 20202
        ERROR = 20249
        P1INVALID = 20266
        P2INVALID = 20267
        P3INVALID = 20268
        P4INVALID = 20269
        P5INVALID = 20270
        NOT_INITIALIZED = 20275
        NOT_AVAILABLE = 20292

    class Flipper(Enum):
        INPUT_FLIPPER = 1
        OUTPUT_FLIPPER = 2

    class PortPosition(Enum):
        DIRECT = 0
        SIDE = 1

    class SlitIndex(Enum):
        INPUT_SIDE = 1
        INPUT_DIRECT = 2
        OUTPUT_SIDE = 3
        OUTPUT_DIRECT = 4

    class ShutterMode(Enum):
        CLOSED = 0
        OPEN = 1
        BNC = 2

    c_ReturnCodes = c_int
    c_Flipper = c_int
    c_PortPosition = c_int
    c_SlitIndex = c_int
    c_ShutterMode = c_int

    def __init__(self, library_registry_name: str = DEFAULT_REGISTRY_NAME):
        self._init(library_registry_name)

    def init(self, library_registry_name: str = DEFAULT_REGISTRY_NAME):
        self._init(library_registry_name)
        self.pythonify_all()
        self.modify_all_for_failure()

    def pythonify_all(self):
        for key, val in self.__dict__.items():
            if isinstance(val, ctypes._CFuncPtr):
                self.__dict__[key] = pythonify(val)

    def modify_all_for_failure(self):
        for key, val in self.__dict__.items():
            if isinstance(val, ctypes._CFuncPtr):
                self.__dict__[key] = self.modify_for_failure(val)

    @staticmethod
    def modify_for_failure(func: Callable):
        @functools.wraps(func)
        def wrapper(*args):
            results: tuple[int, ...] = func(*args)
            if results[0] != ATSpectrograph.ReturnCodes.SUCCESS:
                results = tuple([results[0]] + [None] * (len(results) - 1))
            return results

        return wrapper

    def _init(self, library_registry_name: str = DEFAULT_REGISTRY_NAME):
        self.atspectrograph_dll = library_registry.get(library_registry_name, None)
        if self.atspectrograph_dll is None:
            try:
                self.atspectrograph_dll = load_library(
                    ATSpectrograph.LIBRARY_NAME, ATSpectrograph.DEFAULT_INSTALLATION_PATHS)
            except Exception:  # TODO: Change error catcher
                return

        if self.atspectrograph_dll.has("ATSpectrographInitialize"):
            self.Initialize: Callable = self.atspectrograph_dll.get("ATSpectrographInitialize", "cdecl")
            self.Initialize.argtypes = [String]
            self.Initialize.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographClose", "cdecl"):
            self.Close: Callable = self.atspectrograph_dll.get("ATSpectrographClose", "cdecl")
            self.Close.argtypes = []
            self.Close.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographGetNumberDevices", "cdecl"):
            self.GetNumberDevices: Callable = self.atspectrograph_dll.get("ATSpectrographGetNumberDevices", "cdecl")
            self.GetNumberDevices.argtypes = [POINTER(c_int)]
            self.GetNumberDevices.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographGetFunctionReturnDescription", "cdecl"):
            self.GetFunctionReturnDescription: Callable = self.atspectrograph_dll.get(
                "ATSpectrographGetFunctionReturnDescription", "cdecl")
            self.GetFunctionReturnDescription.argtypes = [ATSpectrograph.c_ReturnCodes, String, c_int]
            self.GetFunctionReturnDescription.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographGetSerialNumber", "cdecl"):
            self.GetSerialNumber: Callable = self.atspectrograph_dll.get("ATSpectrographGetSerialNumber", "cdecl")
            self.GetSerialNumber.argtypes = [c_int, String, c_int]
            self.GetSerialNumber.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographEepromSetOpticalParams", "cdecl"):
            self.EepromSetOpticalParams: Callable = self.atspectrograph_dll.get("ATSpectrographEepromSetOpticalParams", "cdecl")
            self.EepromSetOpticalParams.argtypes = [c_int, c_float, c_float, c_float]
            self.EepromSetOpticalParams.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographEepromGetOpticalParams", "cdecl"):
            self.EepromGetOpticalParams: Callable = self.atspectrograph_dll.get("ATSpectrographEepromGetOpticalParams", "cdecl")
            self.EepromGetOpticalParams.argtypes = [c_int, POINTER(c_float), POINTER(c_float), POINTER(c_float)]
            self.EepromGetOpticalParams.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographGetNumberGratings", "cdecl"):
            self.GetNumberGratings: Callable = self.atspectrograph_dll.get("ATSpectrographGetNumberGratings", "cdecl")
            self.GetNumberGratings.argtypes = [c_int, POINTER(c_int)]
            self.GetNumberGratings.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographSetGrating", "cdecl"):
            self.SetGrating: Callable = self.atspectrograph_dll.get("ATSpectrographSetGrating", "cdecl")
            self.SetGrating.argtypes = [c_int, c_int]
            self.SetGrating.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographGetGrating", "cdecl"):
            self.GetGrating: Callable = self.atspectrograph_dll.get("ATSpectrographGetGrating", "cdecl")
            self.GetGrating.argtypes = [c_int, POINTER(c_int)]
            self.GetGrating.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographGetGratingInfo", "cdecl"):
            self.GetGratingInfo: Callable = self.atspectrograph_dll.get("ATSpectrographGetGratingInfo", "cdecl")
            self.GetGratingInfo.argtypes = [c_int, c_int, POINTER(c_float), String, c_int, POINTER(c_int),
                                            POINTER(c_int)]
            self.GetGratingInfo.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographGratingIsPresent", "cdecl"):
            self.GratingIsPresent: Callable = self.atspectrograph_dll.get("ATSpectrographGratingIsPresent", "cdecl")
            self.GratingIsPresent.argtypes = [c_int, POINTER(c_int)]
            self.GratingIsPresent.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographSetDetectorOffset", "cdecl"):
            self.SetDetectorOffset: Callable = self.atspectrograph_dll.get("ATSpectrographSetDetectorOffset", "cdecl")
            self.SetDetectorOffset.argtypes = [c_int, ATSpectrograph.c_PortPosition, ATSpectrograph.c_PortPosition,
                                               c_int]
            self.SetDetectorOffset.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographGetDetectorOffset", "cdecl"):
            self.GetDetectorOffset: Callable = self.atspectrograph_dll.get("ATSpectrographGetDetectorOffset", "cdecl")
            self.GetDetectorOffset.argtypes = [c_int, ATSpectrograph.c_PortPosition, ATSpectrograph.c_PortPosition,
                                               POINTER(c_int)]
            self.GetDetectorOffset.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographSetGratingOffset", "cdecl"):
            self.SetGratingOffset: Callable = self.atspectrograph_dll.get("ATSpectrographSetGratingOffset", "cdecl")
            self.SetGratingOffset.argtypes = [c_int, c_int, c_int]
            self.SetGratingOffset.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographGetGratingOffset", "cdecl"):
            self.GetGratingOffset: Callable = self.atspectrograph_dll.get("ATSpectrographGetGratingOffset", "cdecl")
            self.GetGratingOffset.argtypes = [c_int, c_int, POINTER(c_int)]
            self.GetGratingOffset.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographSetTurret", "cdecl"):
            self.SetTurret: Callable = self.atspectrograph_dll.get("ATSpectrographSetTurret", "cdecl")
            self.SetTurret.argtypes = [c_int, c_int]
            self.SetTurret.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographGetTurret", "cdecl"):
            self.GetTurret: Callable = self.atspectrograph_dll.get("ATSpectrographGetTurret", "cdecl")
            self.GetTurret.argtypes = [c_int, POINTER(c_int)]
            self.GetTurret.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographWavelengthIsPresent", "cdecl"):
            self.WavelengthIsPresent: Callable = self.atspectrograph_dll.get("ATSpectrographWavelengthIsPresent", "cdecl")
            self.WavelengthIsPresent.argtypes = [c_int, POINTER(c_int)]
            self.WavelengthIsPresent.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographWavelengthReset", "cdecl"):
            self.WavelengthReset: Callable = self.atspectrograph_dll.get("ATSpectrographWavelengthReset", "cdecl")
            self.WavelengthReset.argtypes = [c_int]
            self.WavelengthReset.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographSetWavelength", "cdecl"):
            self.SetWavelength: Callable = self.atspectrograph_dll.get("ATSpectrographSetWavelength", "cdecl")
            self.SetWavelength.argtypes = [c_int, c_float]
            self.SetWavelength.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographGetWavelength", "cdecl"):
            self.GetWavelength: Callable = self.atspectrograph_dll.get("ATSpectrographGetWavelength", "cdecl")
            self.GetWavelength.argtypes = [c_int, POINTER(c_float)]
            self.GetWavelength.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographGotoZeroOrder", "cdecl"):
            self.GotoZeroOrder: Callable = self.atspectrograph_dll.get("ATSpectrographGotoZeroOrder", "cdecl")
            self.GotoZeroOrder.argtypes = [c_int]
            self.GotoZeroOrder.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographAtZeroOrder", "cdecl"):
            self.AtZeroOrder: Callable = self.atspectrograph_dll.get("ATSpectrographAtZeroOrder", "cdecl")
            self.AtZeroOrder.argtypes = [c_int, POINTER(c_int)]
            self.AtZeroOrder.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographGetWavelengthLimits", "cdecl"):
            self.GetWavelengthLimits: Callable = self.atspectrograph_dll.get("ATSpectrographGetWavelengthLimits", "cdecl")
            self.GetWavelengthLimits.argtypes = [c_int, c_int, POINTER(c_float), POINTER(c_float)]
            self.GetWavelengthLimits.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographSlitIsPresent", "cdecl"):
            self.SlitIsPresent: Callable = self.atspectrograph_dll.get("ATSpectrographSlitIsPresent", "cdecl")
            self.SlitIsPresent.argtypes = [c_int, ATSpectrograph.c_SlitIndex, POINTER(c_int)]
            self.SlitIsPresent.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographSlitReset", "cdecl"):
            self.SlitReset: Callable = self.atspectrograph_dll.get("ATSpectrographSlitReset", "cdecl")
            self.SlitReset.argtypes = [c_int, ATSpectrograph.c_SlitIndex]
            self.SlitReset.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographSetSlitWidth", "cdecl"):
            self.SetSlitWidth: Callable = self.atspectrograph_dll.get("ATSpectrographSetSlitWidth", "cdecl")
            self.SetSlitWidth.argtypes = [c_int, ATSpectrograph.c_SlitIndex, c_float]
            self.SetSlitWidth.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographGetSlitWidth", "cdecl"):
            self.GetSlitWidth: Callable = self.atspectrograph_dll.get("ATSpectrographGetSlitWidth", "cdecl")
            self.GetSlitWidth.argtypes = [c_int, ATSpectrograph.c_SlitIndex, POINTER(c_float)]
            self.GetSlitWidth.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographSetSlitZeroPosition", "cdecl"):
            self.SetSlitZeroPosition: Callable = self.atspectrograph_dll.get("ATSpectrographSetSlitZeroPosition", "cdecl")
            self.SetSlitZeroPosition.argtypes = [c_int, ATSpectrograph.c_SlitIndex, c_int]
            self.SetSlitZeroPosition.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographGetSlitZeroPosition", "cdecl"):
            self.GetSlitZeroPosition: Callable = self.atspectrograph_dll.get("ATSpectrographGetSlitZeroPosition", "cdecl")
            self.GetSlitZeroPosition.argtypes = [c_int, ATSpectrograph.c_SlitIndex, POINTER(c_int)]
            self.GetSlitZeroPosition.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographSetSlitCoefficients", "cdecl"):
            self.SetSlitCoefficients: Callable = self.atspectrograph_dll.get("ATSpectrographSetSlitCoefficients", "cdecl")
            self.SetSlitCoefficients.argtypes = [c_int, c_int, c_int, c_int, c_int]
            self.SetSlitCoefficients.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographGetSlitCoefficients", "cdecl"):
            self.GetSlitCoefficients: Callable = self.atspectrograph_dll.get("ATSpectrographGetSlitCoefficients", "cdecl")
            self.GetSlitCoefficients.argtypes = [c_int, POINTER(c_int), POINTER(c_int), POINTER(c_int), POINTER(c_int)]
            self.GetSlitCoefficients.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographShutterIsPresent", "cdecl"):
            self.ShutterIsPresent: Callable = self.atspectrograph_dll.get("ATSpectrographShutterIsPresent", "cdecl")
            self.ShutterIsPresent.argtypes = [c_int, POINTER(c_int)]
            self.ShutterIsPresent.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographIsShutterModePossible", "cdecl"):
            self.IsShutterModePossible: Callable = self.atspectrograph_dll.get("ATSpectrographIsShutterModePossible", "cdecl")
            self.IsShutterModePossible.argtypes = [c_int, ATSpectrograph.c_ShutterMode, POINTER(c_int)]
            self.IsShutterModePossible.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographSetShutter", "cdecl"):
            self.SetShutter: Callable = self.atspectrograph_dll.get("ATSpectrographSetShutter", "cdecl")
            self.SetShutter.argtypes = [c_int, ATSpectrograph.c_ShutterMode]
            self.SetShutter.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographGetShutter", "cdecl"):
            self.GetShutter: Callable = self.atspectrograph_dll.get("ATSpectrographGetShutter", "cdecl")
            self.GetShutter.argtypes = [c_int, POINTER(ATSpectrograph.c_ShutterMode)]
            self.GetShutter.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographFilterIsPresent", "cdecl"):
            self.FilterIsPresent: Callable = self.atspectrograph_dll.get("ATSpectrographFilterIsPresent", "cdecl")
            self.FilterIsPresent.argtypes = [c_int, POINTER(c_int)]
            self.FilterIsPresent.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographFilterReset", "cdecl"):
            self.FilterReset: Callable = self.atspectrograph_dll.get("ATSpectrographFilterReset", "cdecl")
            self.FilterReset.argtypes = [c_int]
            self.FilterReset.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographSetFilter", "cdecl"):
            self.SetFilter: Callable = self.atspectrograph_dll.get("ATSpectrographSetFilter", "cdecl")
            self.SetFilter.argtypes = [c_int, c_int]
            self.SetFilter.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographGetFilter", "cdecl"):
            self.GetFilter: Callable = self.atspectrograph_dll.get("ATSpectrographGetFilter", "cdecl")
            self.GetFilter.argtypes = [c_int, POINTER(c_int)]
            self.GetFilter.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographGetFilterInfo", "cdecl"):
            self.GetFilterInfo: Callable = self.atspectrograph_dll.get("ATSpectrographGetFilterInfo", "cdecl")
            self.GetFilterInfo.argtypes = [c_int, c_int, String, c_int]
            self.GetFilterInfo.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographSetFilterInfo", "cdecl"):
            self.SetFilterInfo: Callable = self.atspectrograph_dll.get("ATSpectrographSetFilterInfo", "cdecl")
            self.SetFilterInfo.argtypes = [c_int, c_int, String]
            self.SetFilterInfo.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographFlipperMirrorIsPresent", "cdecl"):
            self.FlipperMirrorIsPresent: Callable = self.atspectrograph_dll.get("ATSpectrographFlipperMirrorIsPresent", "cdecl")
            self.FlipperMirrorIsPresent.argtypes = [c_int, ATSpectrograph.c_Flipper, POINTER(c_int)]
            self.FlipperMirrorIsPresent.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographFlipperMirrorReset", "cdecl"):
            self.FlipperMirrorReset: Callable = self.atspectrograph_dll.get("ATSpectrographFlipperMirrorReset", "cdecl")
            self.FlipperMirrorReset.argtypes = [c_int, ATSpectrograph.c_Flipper]
            self.FlipperMirrorReset.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographSetFlipperMirror", "cdecl"):
            self.SetFlipperMirror: Callable = self.atspectrograph_dll.get("ATSpectrographSetFlipperMirror", "cdecl")
            self.SetFlipperMirror.argtypes = [c_int, ATSpectrograph.c_Flipper, ATSpectrograph.c_PortPosition]
            self.SetFlipperMirror.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographGetFlipperMirror", "cdecl"):
            self.GetFlipperMirror: Callable = self.atspectrograph_dll.get("ATSpectrographGetFlipperMirror", "cdecl")
            self.GetFlipperMirror.argtypes = [c_int, ATSpectrograph.c_Flipper, POINTER(ATSpectrograph.c_PortPosition)]
            self.GetFlipperMirror.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographSetFlipperMirrorPosition", "cdecl"):
            self.SetFlipperMirrorPosition: Callable = self.atspectrograph_dll.get("ATSpectrographSetFlipperMirrorPosition",
                                                                        "cdecl")
            self.SetFlipperMirrorPosition.argtypes = [c_int, ATSpectrograph.c_Flipper, c_int]
            self.SetFlipperMirrorPosition.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographGetFlipperMirrorPosition", "cdecl"):
            self.GetFlipperMirrorPosition: Callable = self.atspectrograph_dll.get("ATSpectrographGetFlipperMirrorPosition",
                                                                        "cdecl")
            self.GetFlipperMirrorPosition.argtypes = [c_int, ATSpectrograph.c_Flipper, POINTER(c_int)]
            self.GetFlipperMirrorPosition.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographGetFlipperMirrorMaxPosition", "cdecl"):
            self.GetFlipperMirrorMaxPosition: Callable = self.atspectrograph_dll.get("ATSpectrographGetFlipperMirrorMaxPosition",
                                                                           "cdecl")
            self.GetFlipperMirrorMaxPosition.argtypes = [c_int, ATSpectrograph.c_Flipper, POINTER(c_int)]
            self.GetFlipperMirrorMaxPosition.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographGetCCDLimits", "cdecl"):
            self.GetCCDLimits: Callable = self.atspectrograph_dll.get("ATSpectrographGetCCDLimits", "cdecl")
            self.GetCCDLimits.argtypes = [c_int, ATSpectrograph.c_PortPosition, POINTER(c_float), POINTER(c_float)]
            self.GetCCDLimits.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographAccessoryIsPresent", "cdecl"):
            self.AccessoryIsPresent: Callable = self.atspectrograph_dll.get("ATSpectrographAccessoryIsPresent", "cdecl")
            self.AccessoryIsPresent.argtypes = [c_int, POINTER(c_int)]
            self.AccessoryIsPresent.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographSetAccessoryState", "cdecl"):
            self.SetAccessoryState: Callable = self.atspectrograph_dll.get("ATSpectrographSetAccessoryState", "cdecl")
            self.SetAccessoryState.argtypes = [c_int, c_int, c_int]
            self.SetAccessoryState.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographGetAccessoryState", "cdecl"):
            self.GetAccessoryState: Callable = self.atspectrograph_dll.get("ATSpectrographGetAccessoryState", "cdecl")
            self.GetAccessoryState.argtypes = [c_int, c_int, POINTER(c_int)]
            self.GetAccessoryState.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographFocusMirrorIsPresent", "cdecl"):
            self.FocusMirrorIsPresent: Callable = self.atspectrograph_dll.get("ATSpectrographFocusMirrorIsPresent", "cdecl")
            self.FocusMirrorIsPresent.argtypes = [c_int, POINTER(c_int)]
            self.FocusMirrorIsPresent.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographFocusMirrorReset", "cdecl"):
            self.FocusMirrorReset: Callable = self.atspectrograph_dll.get("ATSpectrographFocusMirrorReset", "cdecl")
            self.FocusMirrorReset.argtypes = [c_int]
            self.FocusMirrorReset.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographSetFocusMirror", "cdecl"):
            self.SetFocusMirror: Callable = self.atspectrograph_dll.get("ATSpectrographSetFocusMirror", "cdecl")
            self.SetFocusMirror.argtypes = [c_int, c_int]
            self.SetFocusMirror.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographGetFocusMirror", "cdecl"):
            self.GetFocusMirror: Callable = self.atspectrograph_dll.get("ATSpectrographGetFocusMirror", "cdecl")
            self.GetFocusMirror.argtypes = [c_int, POINTER(c_int)]
            self.GetFocusMirror.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographGetFocusMirrorMaxSteps", "cdecl"):
            self.GetFocusMirrorMaxSteps: Callable = self.atspectrograph_dll.get("ATSpectrographGetFocusMirrorMaxSteps", "cdecl")
            self.GetFocusMirrorMaxSteps.argtypes = [c_int, POINTER(c_int)]
            self.GetFocusMirrorMaxSteps.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographSetPixelWidth", "cdecl"):
            self.SetPixelWidth: Callable = self.atspectrograph_dll.get("ATSpectrographSetPixelWidth", "cdecl")
            self.SetPixelWidth.argtypes = [c_int, c_float]
            self.SetPixelWidth.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographGetPixelWidth", "cdecl"):
            self.GetPixelWidth: Callable = self.atspectrograph_dll.get("ATSpectrographGetPixelWidth", "cdecl")
            self.GetPixelWidth.argtypes = [c_int, POINTER(c_float)]
            self.GetPixelWidth.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographSetNumberPixels", "cdecl"):
            self.SetNumberPixels: Callable = self.atspectrograph_dll.get("ATSpectrographSetNumberPixels", "cdecl")
            self.SetNumberPixels.argtypes = [c_int, c_int]
            self.SetNumberPixels.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographGetNumberPixels", "cdecl"):
            self.GetNumberPixels: Callable = self.atspectrograph_dll.get("ATSpectrographGetNumberPixels", "cdecl")
            self.GetNumberPixels.argtypes = [c_int, POINTER(c_int)]
            self.GetNumberPixels.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographGetCalibration", "cdecl"):
            self.GetCalibration: Callable = self.atspectrograph_dll.get("ATSpectrographGetCalibration", "cdecl")
            self.GetCalibration.argtypes = [c_int, POINTER(c_float), c_int]
            self.GetCalibration.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographGetPixelCalibrationCoefficients", "cdecl"):
            self.GetPixelCalibrationCoefficients: Callable = self.atspectrograph_dll.get(
                "ATSpectrographGetPixelCalibrationCoefficients", "cdecl")
            self.GetPixelCalibrationCoefficients.argtypes = [c_int, POINTER(c_float), POINTER(c_float),
                                                             POINTER(c_float), POINTER(c_float)]
            self.GetPixelCalibrationCoefficients.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographIrisIsPresent", "cdecl"):
            self.IrisIsPresent: Callable = self.atspectrograph_dll.get("ATSpectrographIrisIsPresent", "cdecl")
            self.IrisIsPresent.argtypes = [c_int, ATSpectrograph.c_PortPosition, POINTER(c_int)]
            self.IrisIsPresent.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographSetIris", "cdecl"):
            self.SetIris: Callable = self.atspectrograph_dll.get("ATSpectrographSetIris", "cdecl")
            self.SetIris.argtypes = [c_int, ATSpectrograph.c_PortPosition, c_int]
            self.SetIris.restype = ATSpectrograph.c_ReturnCodes

        if self.atspectrograph_dll.has("ATSpectrographGetIris", "cdecl"):
            self.GetIris: Callable = self.atspectrograph_dll.get("ATSpectrographGetIris", "cdecl")
            self.GetIris.argtypes = [c_int, ATSpectrograph.c_PortPosition, POINTER(c_int)]
            self.GetIris.restype = ATSpectrograph.c_ReturnCodes
